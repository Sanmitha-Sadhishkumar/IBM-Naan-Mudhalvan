# -*- coding: utf-8 -*-
"""Phase3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZYreGj65zrC-xbeX-zYKEnEFVy3xLxgX
"""

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv(r'/content/cpcb_dly_aq_tamil_nadu-2014.csv')
print(df.head)

print("INFO:")
print(df.info())

print("\nDescribe:")
print(df.describe())

print("\nShape")
print(df.shape)

print("\nREMOVING COLUMNS WITH NULL VALUES\n ")
df = df.drop('PM 2.5', axis=1)
df.dropna(inplace=True)

print("\nDROPPING DUPLICATE ROWS:\n")
df.drop_duplicates(subset=None, inplace=True)
print(df.head)

print("\nCONVERTING TO DATE-TIME FORMAT\n")
df['Sampling Date'] = pd.to_datetime(df['Sampling Date'])
print("\nHead after preprocessing:")
print(df.head)

unique_locations = df['Location of Monitoring Station'].unique()
print("\nLocations of Monitoring Stations:")
print(unique_locations)

city_station_counts = df.groupby('City/Town/Village/Area')['Location of Monitoring Station'].count().reset_index()

city_station_counts.columns = ['City', 'Number of Monitoring Stations']

print("\nCity-wise Number of Monitoring Stations:")
print(city_station_counts)

location_counts = df.groupby(['City/Town/Village/Area', 'Location of Monitoring Station']).size().reset_index()
location_counts.columns = ['City', 'Location', 'Number of Rows']

print("\nLocation-wise Number of Rows with City:")
print(location_counts)

summary = df.groupby(['City/Town/Village/Area', 'Location of Monitoring Station'])[['SO2', 'NO2', 'RSPM/PM10']].agg(['sum', 'mean']).reset_index()

summary.columns = ['City', 'Location', 'SO2 Sum', 'SO2 Average', 'NO2 Sum', 'NO2 Average', 'RSPM/PM10 Sum', 'RSPM/PM10 Average']

print("\nSummary of SO2, NO2, and RSPM/PM10 Levels by Location:")
print(summary)

city_avg = df.groupby('City/Town/Village/Area')[['SO2', 'NO2', 'RSPM/PM10']].mean().reset_index()

city_avg.columns = ['City', 'SO2 Average', 'NO2 Average', 'RSPM/PM10 Average']

print("\nAverage SO2, NO2, and RSPM/PM10 Levels by City:")
print(city_avg)

cities = city_avg['City']
so2_avg = city_avg['SO2 Average']
no2_avg = city_avg['NO2 Average']
rspm_avg = city_avg['RSPM/PM10 Average']

bar_width = 0.2

r1 = range(len(cities))
r2 = [x + bar_width for x in r1]
r3 = [x + bar_width for x in r2]
plt.bar(r1, so2_avg, width=bar_width, label='SO2')
plt.bar(r2, no2_avg, width=bar_width, label='NO2')
plt.bar(r3, rspm_avg, width=bar_width, label='RSPM/PM10')

plt.xlabel('Cities')
plt.xticks([x + bar_width for x in r1], cities, rotation=90)

plt.ylabel('Average Levels')

plt.title('Average SO2, NO2, and RSPM/PM10 Levels by City')

plt.legend()

plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

unique_cities = summary['City'].unique()

for city in unique_cities:
    city_data = summary[summary['City'] == city]

    locations = city_data['Location']
    so2_avg = city_data['SO2 Average']
    no2_avg = city_data['NO2 Average']
    rspm_avg = city_data['RSPM/PM10 Average']

    plt.figure(figsize=(10, 5))
    plt.bar(locations, so2_avg, width=0.2, label='SO2')
    plt.bar(locations, no2_avg, width=0.2, label='NO2', bottom=so2_avg)
    plt.bar(locations, rspm_avg, width=0.2, label='RSPM/PM10', bottom=so2_avg + no2_avg)

    plt.xlabel('Locations')
    plt.xticks(rotation=45, ha='right')

    plt.ylabel('Average Levels')

    plt.title(f'Average Pollutant Levels in {city}')

    plt.legend()

    plt.tight_layout()
    plt.show()